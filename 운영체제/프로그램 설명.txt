피드백 알고리즘
Process 객체 : 프로세스에 대한 정보( ID, 도착시간, 필요한 실행시간, 종료시간, 반환시간, 정규화된 반환시간, 남은실행시간, 현재 위치한 준비큐의 레벨)을 가지고있는 객체이다.
ProcessSet 객체 : 생성될 때 파일을 읽어 프로세스들을 만들고 그 프로세스들을 저장하고있는 객체이다.
Q 객체 : 각 단계별 준비큐이며 자신의 레벨정보를 가지고있고, Process 객체를 헤드로 사용해 Process들 이중연결리스트 형태로 가지고있다.
readyQ 객체 : 모든 레벨 준비큐를 관리하는 객체로 Q 객체를 헤드로 사용해 레벨별 준비큐를 이중연결리스트 형태로 가지고있다.
CPU  객체 : 프로세스가 적재되어 수행될 객체이다.
Display 객체 : dis_std() 함수 외에는 Simulator를 위한 객체이며, Simulator는 프로그램의 정상 작동을 확인하기위한 디버깅용도로 만들었다.
Menu 객체 : 결과값만볼지, Simulator를 볼지를 선택하기위한 객체이다.

컴퓨터에서 프로세스가 이동하는 것처럼 도착시간마다 ProcessSet객체에서 readyQ객체로 Process객체를 주고, 문맥교환할때 CPU객체와 readyQ객체가 서로 Process객체를 주고받게 프로그램을 구성했다.

프로그램 순서(핵심기능 부분만):
1. ProcessSet 객체를 생성하여 파일을 읽어들인다.
2. 모든 프로세스의 CPU시간을 합한 시간(n)과 총 프로세스 갯수(n_ps)를 가져온다.
3. 프로그램은 i=0부터 위에서 구한 n+1만큼 반복되며 실행되며 이는 진행 시간을 나타낸다.
4. 현재시간(i)가 프로세스가 도착한 시간이라면 준비큐에 진입한다.
5. 현재 CPU에서 프로세스가 수행중이라면 계속 수행시킨다.
6. CPU에서 수행중인 프로세스가 시간만료, 수행완료 되었거나 프로세스가 없다면 스케쥴링을 하게된다.
7. 스케쥴링:
7-1. 스케쥴링 시점이 수행완료일때 완료된 프로세스의 정보를 설정한다(finish()함수).
7-1-1. 준비큐에 프로세스가 없을때
7-1-1-1. 모든 프로세스가 끝났다면 그대로 진행한다.
7-1-1-2. 아직 수행할 프로세스가 있다면 진행 시간을 1 늘려준다.
7-1-2. 준비큐에 프로세스가 있다면 해당 프로세스를 디스패치 후 수행한다.
7-2. 스케쥴링 시점이 시간만료일때
7-2-1. 준비큐에 프로세스가 없다면 시간만료된 프로세스를 다시 시간할당하고 수행한다.
7-2-2. 준비큐에 프로세스가 있다면 문맥교환을 진행한다.
7-3. CPU에 수행중인 프로세스가 없는경우 매 시간이 스케쥴링 시점이된다.
7-3-1. 준비큐에 프로세스가 없다면 진행 시간을 1 늘려준다.
7-3-2. 준비큐에 프로세스가 있다면 해당 프로세스를 디스패치 후 수행한다.
8. 모든 프로세스가 완료될때 까지 4번부터 반복한다.